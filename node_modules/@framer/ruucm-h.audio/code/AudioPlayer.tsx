import * as React from 'react'
import { useEffect, useState } from 'react'
import { Frame, useCycle, addPropertyControls, ControlType } from 'framer'

export function AudioPlayer({
  width,
  height,
  src,
  autoplay,
  loop,
  muted,
  controls,
  playerState,
  currentTime,
  onCanPlayThrough,
  ...props
}) {
  let audioRef = null
  useEffect(() => {
    console.log('new playerState', playerState)
    if (audioRef) {
      if (playerState == 'play') audioRef.play()
      else if (playerState == 'pause') audioRef.pause()
      else if (playerState == 'stop') audioRef.load()
    }
  }, [playerState])

  useEffect(() => {
    if (audioRef) audioRef.currentTime = currentTime
  }, [currentTime])

  return (
    <div
      style={{
        width: width,
        height: height,
      }}
    >
      <audio
        ref={el => (audioRef = el)}
        key={`#${autoplay}`}
        autoPlay={autoplay}
        loop={loop}
        muted={muted}
        controls={controls}
        preload="auto"
        style={{
          width: '100%',
          position: 'absolute',
          top: '50%',
          transform: 'translateY(-50%)',
        }}
        src={src}
        // src={src + '#t=' + currentTime}
        onCanPlayThrough={() => {
          audioRef.currentTime = currentTime // init currentTime
          onCanPlayThrough(audioRef)
        }}
      />
    </div>
  )
}

AudioPlayer.defaultProps = {
  width: 320,
  height: 31,
  src:
    'https://946663360620-us-east-1-static-files.s3.amazonaws.com/audio-snippets/store.mp3',
  autoplay: false,
  loop: false,
  muted: false,
  controls: true,
  playerState: 'stop',
  currentTime: 0,
  onCanPlayThrough: audioRef => {
    console.log('onCanPlayThrough!')
  },
}

addPropertyControls(AudioPlayer, {
  src: {
    type: ControlType.File,
    allowedFileTypes: ['mp3'],
  },
  autoplay: { type: ControlType.Boolean, title: 'Play' },
  loop: { type: ControlType.Boolean, title: 'Loop' },
  muted: { type: ControlType.Boolean, title: 'Muted' },
  controls: { type: ControlType.Boolean, title: 'Show' },
  currentTime: { type: ControlType.Number, title: 'Time' },
})
